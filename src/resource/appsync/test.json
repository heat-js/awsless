{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "The AWS CloudFormation template for this Serverless application",
	"Resources": {
		"Route53Record": {
			"Type": "AWS::Route53::RecordSet",
			"Properties": {
				"HostedZoneName": "jacksclub.dev.",
				"Name": "public-api.jacksclub.dev.",
				"Type": "A",
				"AliasTarget": {
					"DNSName": {
						"Fn::GetAtt": [
							"CloudFrontDistribution",
							"DomainName"
						]
					},
					"HostedZoneId": "Z2FDTNDATAQYW2"
				}
			}
		},
		"ApiGatewayDNSRecord": {
			"Type": "AWS::Route53::RecordSet",
			"Properties": {
				"HostedZoneName": "jacksclub.dev.",
				"Name": "public-api-key.jacksclub.dev",
				"Type": "A",
				"AliasTarget": {
					"DNSName": {
						"Fn::GetAtt": [
							"ApiGatewayDomain",
							"DistributionDomainName"
						]
					},
					"HostedZoneId": {
						"Fn::GetAtt": [
							"ApiGatewayDomain",
							"DistributionHostedZoneId"
						]
					}
				}
			}
		},
		"AppSyncLambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "appsync.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Policies": [
					{
						"PolicyName": "AppSyncLambdaRole",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "lambda:invokeFunction",
									"Resource": [
										{
											"Fn::Join": [
												":",
												[
													"arn:aws:lambda",
													{
														"Ref": "AWS::Region"
													},
													{
														"Ref": "AWS::AccountId"
													},
													"function",
													"*"
												]
											]
										}
									]
								}
							]
						}
					}
				]
			}
		},
		"GraphQlApi": {
			"Type": "AWS::AppSync::GraphQLApi",
			"Properties": {
				"Name": "public-api",
				"AuthenticationType": "API_KEY",
				"AdditionalAuthenticationProviders": [],
				"XrayEnabled": false
			}
		},
		"GraphQlApiKeyDefault": {
			"Type": "AWS::AppSync::ApiKey",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Description": "Auto-generated api key",
				"Expires": 1641387600
			}
		},
		"GraphQlSchema": {
			"Type": "AWS::AppSync::GraphQLSchema",
			"Properties": {
				"Definition": "type Card {\n  suit: String!\n  rank: String!\n}\n\ninput InputCard {\n  suit: String!\n  rank: String!\n}\n\ninput PaginationInput {\n  limit: Int\n  offset: String\n}\n\ntype Query {\n  test: Boolean\n  user(input: UserInput!): User!\n  credentials: Credentials!\n  statistics: MyStatistics!\n  bet: BetQuery\n  chat: ChatQuery\n  contest(input: ContestInput!): Contest!\n  contests(input: ContestsInput!): [Contest]!\n  contestHistory: [Contest]!\n  contestants(input: ContestantsInput!): [Contestant]!\n  contestant(input: ContestInput!): Contestant\n  rates: [Rate]!\n  jackpot: JackpotQuery!\n  online: OnlineQuery\n}\n\ntype Mutation {\n  test: Boolean\n  trackAffiliate(input: TrackAffiliateInput!): Boolean\n  track(input: TrackInput!): Boolean\n}\n\ninput TrackAffiliateInput {\n  code: ID!\n}\n\ntype Credentials {\n  accessKeyId: String!\n  secretAccessKey: String!\n  sessionToken: String!\n  expiration: AWSDateTime!\n}\n\ntype User {\n  id: ID!\n  name: String!\n  createdAt: AWSDateTime!\n  statistics: UserStatistics!\n  type: String!\n  vip: UserVip!\n}\n\ninput UserInput {\n  username: String\n}\n\ntype DiceState {\n  condition: String!\n  target: Float!\n  result: Float!\n}\n\ntype BlazeState {\n  target: Float!\n  result: Float!\n}\n\ntype HiloRound {\n  card: Card!\n  guess: String\n  multiplier: Float\n}\n\ntype HiloState {\n  rounds: [HiloRound]!\n}\n\ntype VideoPokerState {\n  initialHand: [Card]!\n  finalHand: [Card]!\n  result: String\n}\n\ntype KenoState {\n  risk: String!\n  selectedNumbers: [Int]!\n  drawnNumbers: [Int]!\n}\n\ntype PlinkoState {\n  risk: String!\n  rows: Int!\n  result: Int!\n  point: Float!\n}\n\ntype MinesState {\n  count: Int!\n  boms: [Int]\n  rounds: [Int]!\n}\n\ntype SugarRushState {\n  seed: String!\n}\n\ntype WheelState {\n  degree: Float!\n  selectedMultiplier: Float!\n}\n\ntype TowerRound {\n  door: Int\n  floor: [Int]!\n}\n\ntype TowerState {\n  bombs: Int!\n  rounds: [TowerRound]!\n}\n\ntype BetUser {\n  \n    name: String!\n}\n\ntype UserCurrencyStatistics {\n  currency: String!\n  bets: Int!\n  wins: Int!\n  losses: Int!\n}\n\ntype UserStatistics {\n  bets: Int!\n  wins: Int!\n  losses: Int!\n  currencies: [UserCurrencyStatistics]!\n  messages: Int!\n}\n\ntype MyCurrencyStatistics {\n  currency: String!\n  profit: Float!\n  wagered: Float!\n  bets: Int!\n  wins: Int!\n  losses: Int!\n}\n\ntype MyStatistics {\n  bets: Int!\n  wins: Int!\n  losses: Int!\n  currencies: [MyCurrencyStatistics]!\n  messages: Int!\n}\n\ninterface Seed {\n  client: String!\n  nonce: Int!\n}\n\ntype HiddenSeed implements Seed {\n  client: String!\n  hash: String!\n  nonce: Int!\n}\n\ntype RevealedSeed implements Seed {\n  client: String!\n  server: String!\n  nonce: Int!\n}\n\nunion BetState = DiceState | BlazeState | HiloState | VideoPokerState | KenoState | PlinkoState | MinesState | SugarRushState | WheelState | TowerState\n\ntype Bet {\n  id: ID!\n  game: String!\n  userName: String!\n  status: Boolean!\n  amount: Float!\n  currency: String!\n  payout: Float!\n  multiplier: Float!\n  state: BetState!\n  seed: Seed!\n  createdAt: AWSDateTime!\n}\n\ninput GetBetInput {\n  id: ID!\n}\n\ninput MyBetsInput {\n  offset: String\n  limit: Int\n}\n\ntype BetQuery {\n  get(input: GetBetInput!): Bet!\n  my(input: MyBetsInput!): [Bet]\n  all(input: LiveBetInput!): [LiveBet]\n  highroller(input: LiveBetInput!): [LiveBet]\n  rare(input: LiveBetInput!): [LiveBet]\n}\n\ninput ListMessagesInput {\n  room: String!\n  limit: Int\n  offset: String\n}\n\ntype Room {\n  id: ID!\n  name: String!\n}\n\ntype Message {\n  id: ID!\n  identifier: String\n  room: String!\n  sender: Sender!\n  content: String!\n  createdAt: AWSDateTime!\n}\n\ntype Sender {\n  name: String!\n  type: String!\n  vip: VipLevel\n}\n\ntype ChatQuery {\n  rooms: [Room]!\n  messages(input: ListMessagesInput!): [Message]!\n}\n\ninput ContestInput {\n  id: ID!\n}\n\ninput ContestsInput {\n  limit: Int\n}\n\ninput ContestantsInput {\n  id: ID!\n  offset: Int\n  limit: Int\n}\n\ninterface PrizePool {\n  total: Float!\n}\n\ntype FixedPrizePool implements PrizePool {\n  total: Float!\n  prizes: [Float]!\n}\n\ntype FlexiblePrizePoolEntry {\n  breakpoint: Int!\n  prize: Float!\n}\n\ntype FlexiblePrizePool implements PrizePool {\n  total: Float!\n  prizes: [FlexiblePrizePoolEntry]!\n}\n\nenum Ranking {\n  date\n  count\n  wager\n  multiplier\n  profit\n}\n\ntype Contestant {\n  rank: Int!\n  score: Float\n  name: String\n  prize: Float\n}\n\ntype Contest {\n  id: ID!\n  title: String!\n  image: String!\n  color: String!\n  intro: String!\n  description: String!\n  special: Boolean!\n  ranking: Ranking!\n  startingAt: AWSDateTime!\n  endingAt: AWSDateTime!\n  \n    prizePool: PrizePool!\n}\n\ntype Rate {\n  currency: String!\n  value: Float!\n}\n\ntype JackpotAmount {\n  currency: String!\n  value: Float!\n}\n\ntype JackpotAmounts {\n  total: Float!\n  amounts: [JackpotAmount]!\n}\n\ntype JackpotPayout {\n  payout: Float!\n  currency: String!\n}\n\ntype JackpotBet {\n  id: ID!\n  amount: Float!\n  currency: String!\n  userName: String!\n  createdAt: AWSDateTime!\n  payouts: [JackpotPayout]!\n  payout: Float!\n}\n\ntype JackpotQuery {\n  amount: JackpotAmounts!\n  history(input: PaginationInput!): [JackpotBet]!\n}\n\ntype LiveBet {\n  id: ID!\n  game: String!\n  userName: String!\n  status: Boolean!\n  amount: Float!\n  currency: String!\n  payout: Float!\n  multiplier: Float!\n  createdAt: AWSDateTime!\n}\n\ninput LiveBetInput {\n  limit: Int!\n}\n\ntype OnlineQuery {\n  count: Int!\n}\n\ninput TrackInput {\n  code: ID!\n}\n\nenum VipLevel {\n  none\n  iron\n  bronze\n  silver\n  gold\n  platinum\n  emerald\n  sapphire\n  ruby\n  diamond\n  master\n}\n\ntype UserVip {\n  id: Int!\n  name: VipLevel!\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n",
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				}
			}
		},
		"GraphQlDsNone": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "None",
				"Type": "NONE"
			}
		},
		"GraphQlDsTrackAffiliate": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "TrackAffiliate",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"affiliate__campaign-track"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetCredentials": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetCredentials",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"auth__credentials-get"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetUser": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetUser",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"auth__user-get"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetStatistics": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetStatistics",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"betting__statistics-get"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetBet": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetBet",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"betting__bet-get"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListBets": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListBets",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"betting__bet-list"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListRooms": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListRooms",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"chat__room-list"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListMessages": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListMessages",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"chat__message-list"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetChatStatistics": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetChatStatistics",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"chat__user-statistics"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetUserType": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetUserType",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"chat__user-type"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetOnline": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetOnline",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"chat__online-get"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListFriends": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListFriends",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"chat__friend-list"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListFriendRequests": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListFriendRequests",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"chat__friend-requests"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetFriendship": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetFriendship",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"chat__friend-has"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetContest": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetContest",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"contest__contest-get"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListContests": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListContests",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"contest__contest-progress-list"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListContestHistory": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListContestHistory",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"contest__contest-completed-list"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetContestant": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetContestant",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"contest__contestant-get"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListContestants": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListContestants",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"contest__contestant-list"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListRates": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListRates",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"exchange-rate__list"
							]
						]
					}
				}
			}
		},
		"GraphQlDsJackpotAmount": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "JackpotAmount",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"jackpot__amount"
							]
						]
					}
				}
			}
		},
		"GraphQlDsJackpotHistory": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "JackpotHistory",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"jackpot__history"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListAllBets": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListAllBets",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"live-bet__all"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListHighrollerBets": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListHighrollerBets",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"live-bet__highroller"
							]
						]
					}
				}
			}
		},
		"GraphQlDsListRareBets": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "ListRareBets",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"live-bet__rare"
							]
						]
					}
				}
			}
		},
		"GraphQlDsOnlineCount": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "OnlineCount",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"online__count"
							]
						]
					}
				}
			}
		},
		"GraphQlDsTrack": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "Track",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"tracking__hit"
							]
						]
					}
				}
			}
		},
		"GraphQlDsGetVipUserLevel": {
			"Type": "AWS::AppSync::DataSource",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"Name": "GetVipUserLevel",
				"Type": "AWS_LAMBDA",
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"AppSyncLambdaRole",
						"Arn"
					]
				},
				"LambdaConfig": {
					"LambdaFunctionArn": {
						"Fn::Join": [
							":",
							[
								"arn:aws:lambda",
								{
									"Ref": "AWS::Region"
								},
								{
									"Ref": "AWS::AccountId"
								},
								"function",
								"vip__user-level"
							]
						]
					}
				}
			}
		},
		"GraphQlResolverMutationtrackAffiliate": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Mutation",
				"FieldName": "trackAffiliate",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n#set ( $ips = $context.request.headers['x-forwarded-for'].split(' ') )\n\n$util.qr( $payload.put('userId', 'guest') )\n$util.qr( $payload.put('ip', $ips[0]) )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsTrackAffiliate",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQuerycredentials": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "credentials",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n$util.qr( $payload.put('userId', 'guest') )\n$util.qr( $payload.put('userName', 'guest') )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetCredentials",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQueryuser": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "user",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.qr( $context.result.put('__stash__', $context.stash) )\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetUser",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQuerybet": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "bet",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n{}\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsNone",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverUserstatistics": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "User",
				"FieldName": "statistics",
				"RequestMappingTemplate": "\n#set ( $payload = {} )\n$util.qr( $payload.put('userId', $context.source.id) )\n$util.qr( $context.stash.put('userId', $context.source.id) )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.qr( $context.result.put('__stash__', $context.stash) )\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetStatistics",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQuerystatistics": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "statistics",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n$util.qr( $payload.put('userId', 'guest') )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.qr( $context.result.put('__stash__', $context.stash) )\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetStatistics",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverBetQueryget": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "BetQuery",
				"FieldName": "get",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetBet",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverBetQuerymy": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "BetQuery",
				"FieldName": "my",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n$util.qr( $payload.put('userId', 'guest') )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListBets",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQuerychat": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "chat",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n{}\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsNone",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQueryfriend": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "friend",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n{}\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsNone",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverChatQueryrooms": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "ChatQuery",
				"FieldName": "rooms",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListRooms",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverChatQuerymessages": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "ChatQuery",
				"FieldName": "messages",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListMessages",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverFriendQuerylist": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "FriendQuery",
				"FieldName": "list",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n$util.qr( $payload.put('userName', 'guest') )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListFriends",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverFriendQueryrequests": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "FriendQuery",
				"FieldName": "requests",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n$util.qr( $payload.put('userName', 'guest') )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListFriendRequests",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverUserfriendship": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "User",
				"FieldName": "friendship",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n$util.qr( $payload.put('userName', 'guest') )\n$util.qr( $payload.put('username', $context.source.name) )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetFriendship",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverUsertype": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "User",
				"FieldName": "type",
				"RequestMappingTemplate": "\n#set ( $payload = {} )\n$util.qr( $payload.put('userId',\t$context.source.id) )\n$util.qr( $payload.put('userName',\t$context.source.name) )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetUserType",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverUserStatisticsmessages": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "UserStatistics",
				"FieldName": "messages",
				"RequestMappingTemplate": "\n#set ( $payload = $context.source.get('__stash__') )\n$util.qr( $context.put('stash', $context.source.get('__stash__')) )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetChatStatistics",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverChatQueryonline": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "ChatQuery",
				"FieldName": "online",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetOnline",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQuerycontest": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "contest",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetContest",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQuerycontests": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "contests",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListContests",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQuerycontestHistory": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "contestHistory",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListContestHistory",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQuerycontestant": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "contestant",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n$util.qr( $payload.put('userId', 'guest') )\n$util.qr( $payload.put('userName', 'guest') )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetContestant",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQuerycontestants": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "contestants",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListContestants",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQueryrates": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "rates",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListRates",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQueryjackpot": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "jackpot",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n{}\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsNone",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverJackpotQueryamount": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "JackpotQuery",
				"FieldName": "amount",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsJackpotAmount",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverJackpotQueryhistory": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "JackpotQuery",
				"FieldName": "history",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsJackpotHistory",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverBetQueryall": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "BetQuery",
				"FieldName": "all",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListAllBets",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverBetQueryhighroller": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "BetQuery",
				"FieldName": "highroller",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListHighrollerBets",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverBetQueryrare": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "BetQuery",
				"FieldName": "rare",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsListRareBets",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverQueryonline": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Query",
				"FieldName": "online",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n{}\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsNone",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverOnlineQuerycount": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "OnlineQuery",
				"FieldName": "count",
				"RequestMappingTemplate": "\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($context.arguments.input)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsOnlineCount",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverMutationtrack": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "Mutation",
				"FieldName": "track",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n#set ( $ips = $context.request.headers['x-forwarded-for'].split(' ') )\n\n$util.qr( $payload.put('userId', 'guest') )\n$util.qr( $payload.put('ip', $ips[0]) )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsTrack",
						"Name"
					]
				}
			}
		},
		"GraphQlResolverUservip": {
			"Type": "AWS::AppSync::Resolver",
			"DependsOn": "GraphQlSchema",
			"Properties": {
				"ApiId": {
					"Fn::GetAtt": [
						"GraphQlApi",
						"ApiId"
					]
				},
				"TypeName": "User",
				"FieldName": "vip",
				"RequestMappingTemplate": "\n#set ( $payload = $context.arguments.input )\n#if ( !$payload )\n    #set ( $payload = {} )\n#end\n\n$util.qr( $payload.put('userId', $context.source.id) )\n\n{\n    \"version\" : \"2018-05-29\",\n    \"operation\": \"Invoke\",\n    \"payload\": $util.toJson($payload)\n}\n",
				"ResponseMappingTemplate": "\n#if( $context.error )\n\t#if( $context.error.message.contains('[viewable]') )\n\t\t$util.error(\n\t\t\t$context.error.message.replace('[viewable] ', ''),\n\t\t\t'ViewableError',\n\t\t\t{},\n\t\t\t{}\n\t\t)\n\t#else\n\t\t$util.error(\n\t\t\t'Something went wrong.',\n\t\t\t'InternalError'\n\t\t)\n\t#end\n#else\n\t$util.toJson( $context.result )\n#end\n",
				"Kind": "UNIT",
				"DataSourceName": {
					"Fn::GetAtt": [
						"GraphQlDsGetVipUserLevel",
						"Name"
					]
				}
			}
		}
	},
	"Outputs": {
		"ServerlessDeploymentBucketName": {
			"Value": "deployments.jacksclub.eu-west-1"
		},
		"ApiDashkeyLambdaFunctionQualifiedArn": {
			"Description": "Current Lambda function version",
			"Value": {
				"Ref": "ApiDashkeyLambdaVersioneKR7qibsLzrtWinrVD6h0WG6RQVvyJ31Mfr5qZXAI"
			}
		},
		"ServiceEndpoint": {
			"Description": "URL of the service endpoint",
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Ref": "ApiGatewayRestApi"
						},
						".execute-api.",
						{
							"Ref": "AWS::Region"
						},
						".",
						{
							"Ref": "AWS::URLSuffix"
						},
						"/prod"
					]
				]
			}
		},
		"GraphQlApiUrl": {
			"Value": {
				"Fn::GetAtt": [
					"GraphQlApi",
					"GraphQLUrl"
				]
			}
		},
		"GraphQlApiId": {
			"Value": {
				"Fn::GetAtt": [
					"GraphQlApi",
					"ApiId"
				]
			}
		},
		"GraphQlApiKeyDefault": {
			"Value": {
				"Fn::GetAtt": [
					"GraphQlApiKeyDefault",
					"ApiKey"
				]
			}
		}
	}
}
